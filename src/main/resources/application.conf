# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.http.secret.key="[changeme]"

# The application languages
# ~~~~~
play.i18n.langs=["en"]

# Registers the HTTP request handler
# ~~~~~
play.http.requestHandler = "play.api.http.DefaultHttpRequestHandler"

# Registers the HTTP error handler
# ~~~~~
play.http.errorHandler = "utils.ErrorHandler"

# Registers the filters
# ~~~~~
play.http.filters = "utils.Filters"

# The application DI modules
# ~~~~~
play.modules.enabled += "modules.QuartzSchedulerModule"
play.modules.enabled += "auth.modules.AuthModule"
play.modules.enabled += "admin.modules.AdminModule"
play.modules.enabled += "play.api.libs.mailer.MailerModule"
play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoModule"

play.modules.disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
play.modules.disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"

# MongoDB
mongodb.uri ="mongodb://localhost:27017/app"

# Akka config
akka {
  loglevel = "INFO"
  jvm-exit-on-fatal-error=off
}

# Play mailer
play.mailer {
  host = "localhost"
  port = 25
  mock = true
}

# The URL to the UI in dev mode
ui.dev.url = "http://localhost:5000"

# Security Filter Configuration - Content Security Policy
play.filters.headers {
  contentSecurityPolicy = "default-src 'self';"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" img-src 'self' data: blob: ;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" style-src 'self' 'unsafe-inline' data: blob: fonts.googleapis.com;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" font-src 'self' data: blob: fonts.gstatic.com fonts.googleapis.com;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" script-src 'self' ;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" connect-src 'self' ;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" child-src 'self' data: blob: ;"
}

#Security Filter Configuration - CORS
play.filters.cors {
  allowedOrigins = [${ui.dev.url}]
  allowedHttpMethods = ["GET", "POST"]
}

# CSRF Token Filter Configuration
# ~~~~~
play.filters.csrf.bypassCorsTrustedOrigins = false
play.filters.csrf.cookie.name="PLAY_CSRF_TOKEN" // We store the CSRF token in a cookie instead of the session so that UI app can read it
play.filters.csrf.contentType.blackList=[ // We would also check AJAX requests from type application/json
  "application/x-www-form-urlencoded",
  "multipart/form-data",
  "text/plain",
  "application/json"
]

include "auth.conf"
include "admin.conf"
